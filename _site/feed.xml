<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SurfaceW</title>
    <description>Little Dots accumulated to make a Difference.</description>
    <link>http://www.surfacew.com/</link>
    <atom:link href="http://www.surfacew.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 04 Aug 2016 13:32:29 +0800</pubDate>
    <lastBuildDate>Thu, 04 Aug 2016 13:32:29 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Alfred 效率神器全攻略</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;工欲善其事必先利其器，Alfred 在 Mac 上所迸发的效率是前所未有的！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/articles/alfred/appicon.png&quot; style=&quot;width: 200px; height: 200px;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;作为 Mac 上最强大的效率工具，Alfred 在 Spotlight（MacOS X 自带的搜索和快速启动引擎）的基础上优化了快速启动与搜索的功能，还引入了 Workflows 等强大的扩展功能，使之成为了一个拥有无限自动化潜力的「工具平台」软件，可以用它来实现近乎一切有关自动化的想法。&lt;/p&gt;

&lt;p&gt;我虽不是 Alfred 的骨灰级用户，但作为一个普通「玩家」，就已经在日常工作中很高频率的使用到了 Alfred。以下图为证：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;可以看见周期性的「下凹」吧？没错，那就是日常偷懒的周六周日 ╮(╯_╰)╭&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/alfred/QQ20160730-0@2x.jpg&quot; alt=&quot;QQ20160730-0@2x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了说明 Alfred 的潜在价值。在这里，我们不妨做一个简单的计算，假设每天我都能够保持现况以每日平均唤醒 45.2 次为基数（其实最近的使用频率远高于 45.2 次）。假如每次 Alfred 的操作，可以为我节省 &lt;code&gt;5s&lt;/code&gt; 的时间（往往有些复杂的操作会大于 5s，比如去寻找一个藏得很深的文件)，那么 5 年下来，竟然能够节省 &lt;strong&gt;4.7&lt;/strong&gt; 天。换言之，你能够少用 4.7 天的电脑去工作，换言之，&lt;strong&gt;Alfred 让你的生命延长了 4.7 天&lt;/strong&gt;！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;shell
5 * 365 * 45.2 * 5 / 3600 / 24 = 4.773726852 天
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可见，Alfred 是每日强依赖于计算机的工作者的效率神器。鉴于之前互联网上零零散散地对 Alfred 的文章介绍不够系统，也不是最新，所以我打算在此做个「全家桶」，让读者更好地使用 Alfred 来提高日常的工作效率！&lt;/p&gt;

&lt;p&gt;那么接下来我就带领大家感受一下 Alfred 的魅力吧 ~&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;软件安装&lt;/h2&gt;

&lt;p&gt;Alfred 仅支持 Mac 操作系统。推荐在 &lt;a href=&quot;https://www.alfredapp.com/&quot;&gt;官方网站&lt;/a&gt; 或 AppStore 中下载该应用，目前其最新版本为：&lt;code&gt;3.0.3&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;Alfred 的基本功能是免费的，但部分强大的扩展功能和 Workflows 功能是需要购买升级包的。个人推荐有经济能力的人还是购买正版的授权码，因为这款软件绝对值这个价（个人授权是 17 欧元，折合人民币 126 元左右，家庭版则更便宜）。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;基础功能配置和使用&lt;/h2&gt;

&lt;h3 id=&quot;section-3&quot;&gt;基础配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;推荐大家配置 Alfred 的唤醒键为自己熟悉的快捷键，我个人喜欢使用 &lt;code&gt;⌥ (Option) + Space&lt;/code&gt; 键唤醒，同时也选择关闭了 Apple 自带的 Spotlight 搜索。如何关闭 Spotlight 请自行百度。&lt;/li&gt;
  &lt;li&gt;在 Features 右侧面板的 Default Results 选项卡中，我们能够让 Alfred 选择性地从 Apple Spotlight 所提供的元数据索引服务中选择自己想要搜索的内容类型和地址。
    &lt;ul&gt;
      &lt;li&gt;在配置的时候，&lt;em&gt;最理想的是只将自己期望检索的内容放入搜索域（Search Scope）中&lt;/em&gt;，这样能够很大程度上提高 Alfred 的展示搜索结果的速度。 &lt;/li&gt;
      &lt;li&gt;对于检索文件的类型，自然也是越少越好，对于我而言很少用到图片、压缩包等文件类型的检索，自然就去掉了。注意：&lt;strong&gt;这里不推荐大家搜索所有类型的文件（Search all file types）&lt;/strong&gt; 因为这样搜索出来的结果不仅速度慢，而且搜索结果质量非常之差，会搜出很多系统生成的文件信息等等。&lt;/li&gt;
      &lt;li&gt;其次在右侧 &lt;code&gt;Advanced…&lt;/code&gt; 按钮上可以配置自定义类型的文件，比如我这里配置了思维导图的 &lt;code&gt;.mmap&lt;/code&gt; 以及 markdown 文件的 &lt;code&gt;.md&lt;/code&gt; ，根据自身需求可以添加对应的文件类型让 Alfred 去检索这些文件。只需要将 Alfred 无法检索到的文件类型拖至弹出的框内即可添加。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/alfred/QQ20160730-1@2x.jpg&quot; alt=&quot;QQ20160730-1@2x&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alfred 还能够选择默认的样式或者自定义外观，喜欢折腾 DIY 样式的小伙伴可以在 &lt;code&gt;Appearance&lt;/code&gt; 面板中修改 Alfred 交互面板的样式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/alfred/QQ20160731-4@2x.jpg&quot; alt=&quot;QQ20160731-4@2x&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在 &lt;code&gt;Advanced&lt;/code&gt; 配置中有涉及「缓存清理」、「元数据重建」等高级配置功能，一般不需要配置，不知道如何使用的情况下请不要茫然下手。&lt;/li&gt;
  &lt;li&gt;Alfred 同时也支持使用「移动端版本的 Alfred」来控制桌面端。具体可以参考 &lt;a href=&quot;http://sspai.com/28137&quot;&gt;这篇文章&lt;/a&gt; ，在这里我就不赘述了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;基础功能&lt;/h3&gt;

&lt;h4 id=&quot;section-5&quot;&gt;搜索功能&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;通过上述的配置，我能够非常快地搜索各类指定类型的文件。在对应的搜索结果上：
    &lt;ul&gt;
      &lt;li&gt;我们能够通过 &lt;code&gt;↑↓&lt;/code&gt; 键切换选项，并敲击回车键打开文件或者目录。&lt;/li&gt;
      &lt;li&gt;也可以使用 &lt;code&gt;⌘ + 数字键&lt;/code&gt; 快速打开对应的文件或者目录。&lt;/li&gt;
      &lt;li&gt;在选中的文件或者目录上点击 &lt;code&gt;fn&lt;/code&gt; 键可以触发其 &lt;strong&gt;额外的操作&lt;/strong&gt;，配置参考。
&lt;img src=&quot;/img/articles/alfred/QQ20160731-2@2x.jpg&quot; alt=&quot;QQ20160730-1@2x&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;在对应的 &lt;em&gt;文件&lt;/em&gt; 上使用 &lt;code&gt;⌘ + 回车键&lt;/code&gt; 可以 &lt;strong&gt;进入当前文件所在的文件夹中&lt;/strong&gt;。 &lt;/li&gt;
      &lt;li&gt;Alfred 同时也支持「&lt;strong&gt;模糊搜索&lt;/strong&gt;」，自然能够有效地匹配到对应的搜索内容。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/alfred/normal_search.gif&quot; alt=&quot;normal_search&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alfred 也支持对应用程序的搜索。
    &lt;ul&gt;
      &lt;li&gt;注意：需要检查 &lt;code&gt;/Applications&lt;/code&gt; 是否在之前的 Alfred 的可搜索域的配置目录中。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/alfred/app.gif&quot; alt=&quot;app&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;web-&quot;&gt;Web 搜索&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Alfred 内置了非常多的快捷搜索，可以快速搜索互联网信息。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;如下图 1 所标志的地方，在 Alfred 中输入 &lt;code&gt;amazon&lt;/code&gt; 并敲击回车，然后输入对应的想要搜索的商品，便会自动在浏览器中打开 Amazon 并显示搜索结果。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;这样的配置还能够通过图中 2 所标志的按钮添加自定义的搜索项，图中添加了一个自定义的淘宝搜索快捷方式。这令我在购物的时候再也不用去加载淘宝首页然后被强行分散注意力了。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/alfred/QQ20160731-0@2x.jpg&quot; alt=&quot;QQ20160731-0@2x&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alfred 能够记忆你在 Alfred 中敲击过的 URL 并记录在本地数据库中，你下一次再输入 URL 的时候能够快速找到这个 URL。例如我曾经输入过 12306 的网址，而现在我只需要：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/alfred/12306.gif&quot; alt=&quot;12306&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alfred 还能够在输入好内容之后通过点击 &lt;code&gt;⌃(Ctrl) + ↩︎（Enter）&lt;/code&gt; 组合键打开浏览器默认的搜索引擎进行搜索。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/alfred/search.gif&quot; alt=&quot;search&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;计算器&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Alfred 也支持计算器计算可以简单地输入 &lt;code&gt;22 * 33&lt;/code&gt; 便能够计算出结果，敲击回车键之后能够自动保存到剪贴板中，方便快速复制和使用。&lt;/li&gt;
  &lt;li&gt;Alfred 也支持复杂表达式的计算，但是需要使用 &lt;code&gt;=&lt;/code&gt; 作为开头，比如：&lt;code&gt;=log2(34) + sqrt(64/2*2^3)&lt;/code&gt; 表达式。
    &lt;ul&gt;
      &lt;li&gt;之前特喜欢用这个功能算账，表示很给力。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/alfred/math.gif&quot; alt=&quot;math&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;词典查询和通讯录查询&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Alfred 内置了词典查询并使用 Apple 自带的词典软件，可以通过 &lt;code&gt;define&lt;/code&gt; 和 &lt;code&gt;spell&lt;/code&gt; 两个关键词唤起。值得一提的是 &lt;code&gt;spell&lt;/code&gt; 能够帮你模糊拼写，有时候忘了单词怎么拼，可以使用它，感觉迷之好用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/alfred/dictionary.gif&quot; alt=&quot;dictionary&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alfred 也内置了通信录查询，联动 Apple 自带的通讯录，输入对应小伙伴的名词能够查看对应名片，还能够 Copy 对应的信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;snippets-&quot;&gt;剪切板和 Snippets 访问&lt;/h4&gt;

&lt;p&gt;这个是 Alfred 非常有用的功能，建议大家在配置中选择自己的快捷键，并启动对图片和文件复制的缓存。Alfred 同时支持自定义的 Snippet （字符片段）能够将自己定义的文字通过关键词或者快捷键的方式插入到当前光标之后。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/alfred/QQ20160731-1@2x.jpg&quot; alt=&quot;QQ20160731-1@2x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对应的演示如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/alfred/copy.gif&quot; alt=&quot;copy&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;系统功能&lt;/h4&gt;

&lt;p&gt;Alfred 同时还支持快速锁屏幕、关机、清空回收站、休眠等快捷命令。我比较常用的推荐如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;lock&lt;/code&gt; 1s 锁屏，走，吃饭去 ~&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;empty&lt;/code&gt; 清空回收站，瞬间强迫症患者清爽了。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;eject&lt;/code&gt; 命令可以弹出磁盘、存储卡或者虚拟磁盘镜像，如 &lt;code&gt;.dmg&lt;/code&gt; 挂载后的磁盘。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于临时的 &lt;code&gt;shell&lt;/code&gt; 命令，Alfred 可以在唤醒的输入框中输入 &lt;code&gt;&amp;gt;&lt;/code&gt; 字符来启动 &lt;code&gt;Terminal&lt;/code&gt; 以执行 &lt;code&gt;&amp;gt;&lt;/code&gt; 之后的命令字符串。&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;其它扩展&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Alfred 原生支持 &lt;code&gt;1Passowrd&lt;/code&gt; 作为密码备忘的神器。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;workflows&quot;&gt;Workflows&lt;/h2&gt;

&lt;h3 id=&quot;workflows-1&quot;&gt;使用 Workflows&lt;/h3&gt;

&lt;p&gt;Workflows 是一种由自己或者互联网上的开发者为了提高日常效率而开发的自动化脚本以及程序。Workflows 可以在后面给出的资源站点上搜索找到，下载之后双击便可以自动安装到 Workflows 列表中。&lt;/p&gt;

&lt;p&gt;Workflows 非常强大，在这里我陈列几个自己非常喜欢的，也是非常有助于提高日常效率的 Workflows 用于演示，而读者最好可以自挠痒点，找到或者设计属于自己的 Workflows。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Chrome History&lt;/code&gt; 以及 &lt;code&gt;Chrome Bookmarks&lt;/code&gt; 可以用于搜索 Chrome 的收藏书签和历史记录（支持模糊搜索）。
    &lt;ul&gt;
      &lt;li&gt;注意，我自定义了唤醒 Chrome Bookmarks 的快捷键为 &lt;code&gt;Ctrl + Option + Command + B&lt;/code&gt; （全局优先级最高的快捷键，会覆盖程序内部的快捷键）&lt;/li&gt;
      &lt;li&gt;下图展示了 Bookmarks 的应用，History 类似。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/alfred/bookmarks.gif&quot; alt=&quot;bookmarks&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Evernote&lt;/code&gt;：支持印象笔记的全局搜索。这功能很好很强大，能够帮助自己快速定位到具体的印象笔记的条目之上。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Mail.app Search&lt;/code&gt;：支持 Email Apple 自带的邮件应用的全局搜索。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Airdrop&lt;/code&gt;：快速打开 Mac 的 AirDrop 功能。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Dash&lt;/code&gt;：代码 Doc 文档全局快速搜索。妈妈再也不用担心我查 API 的速度很慢了。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Sublime Text Projects&lt;/code&gt;：自动搜索索引范围下的 Sublime Projects。开发者提速工具， 这个个人非常喜欢，直接就载入项目文件了，速度非常之快，绝不拖泥带水。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Relaunched&lt;/code&gt;：重启没有响应的程序。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Show Desktop&lt;/code&gt;：一键无窗口，浑身变轻松。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;TerminalFinder&lt;/code&gt;：Terminal 和 Finder 之间互相切换。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;workflows-2&quot;&gt;设计 Workflows&lt;/h3&gt;

&lt;p&gt;Workflows 的设计可以参考官方开发者文档，以及 &lt;a href=&quot;http://myg0u.com/python/2015/05/23/tutorial-alfred-workflow.html&quot;&gt;这篇关于如何开发的文章&lt;/a&gt;。在这里就不赘述了。&lt;/p&gt;

&lt;h3 id=&quot;workflows-&quot;&gt;Workflows 资源&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.alfredforum.com/&quot;&gt;Alfred 论坛&lt;/a&gt;：个人开发者开发的解决比较特别的问题的插件居多，可以比较容易的通过 &lt;code&gt;alfred + 问题关键词&lt;/code&gt; 在 Google 上搜到。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.alfredworkflow.com/&quot;&gt;Workflows 中文站&lt;/a&gt;：国人收藏的超多 Workflows，总有几款能够满足你。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.alfredapp.com/workflows/&quot;&gt;Workflows 官方站点&lt;/a&gt;：官方推荐的「装机必备」系列 Workflows。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.packal.org/&quot;&gt;Packal&lt;/a&gt;：官方推荐的 Workflows 分享站点。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-10&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;由于篇幅长度的限制，部分内容的扩展和深度阅读可以从下面的参考文章中获悉。建议读者自己多多玩味一番这个激活并提高自己日常 Mac 上工作效率的神器，省时省力，让效率飞起来 ~&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;参考文章&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sspai.com/34468&quot;&gt;Alfred 3.0 新版详解&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/19985861&quot;&gt;如何使用Alfred提升操作效率&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sspai.com/32979?preview&quot;&gt;从零开始学习 Alfred（上）：基础功能及设置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/19986749&quot;&gt;从零开始学习 Alfred（下）：用Alfred大幅提升操作效率 - workflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sspai.com/27900/&quot;&gt;OS X 效率启动器 Alfred 详解与使用技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 03 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://www.surfacew.com/tool/2016/08/03/Alfred/</link>
        <guid isPermaLink="true">http://www.surfacew.com/tool/2016/08/03/Alfred/</guid>
        
        <category>efficient tools</category>
        
        
        <category>tool</category>
        
      </item>
    
      <item>
        <title>在Sublime和WebStorm下使用Eslinter以及Airbnb规则集合</title>
        <description>&lt;p&gt;前提条件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;已安装 &lt;code&gt;npm&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先需要做一些针对全局和项目的通用安装：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;安装 eslint：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;
npm install -g eslint
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;转移到你正在开发的项目的根目录，如果根目录下没有 &lt;code&gt;.eslintrc&lt;/code&gt; ，建立一个相同命名的文件，并向文件添加如下内容：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;
{
    &quot;parser&quot;: &quot;babel-eslint&quot;,
    &quot;env&quot;: {
        &quot;browser&quot;: true,
        &quot;node&quot;: true
    },
    &quot;extends&quot;: &quot;airbnb&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;在项目目录下安装 Airbnb JavaScript 条件集：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt; 
# 这里我们采用 Airbnb 的规范集合
npm install --save-dev eslint-config-airbnb eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来根据不同的编辑器环境做 Linter 的配置：&lt;/p&gt;

&lt;h4 id=&quot;sublime&quot;&gt;Sublime&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;安装 SublimeLinter ：推荐在 Sublime 下使用 &lt;code&gt;Package Control&lt;/code&gt; 来安装 SublimeLinter，&lt;a href=&quot;http://www.sublimelinter.com/en/latest/&quot;&gt;Sublime Linter Guide&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;重新启动 Sublime 确保 SublimeLinter 已经启动，方可看到 Lint 信息了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;webstorm&quot;&gt;WebStorm&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;在 WebStorm 中激活 ESLint 插件。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
preferences &amp;gt; Languages &amp;amp; Frameworks &amp;gt; JavaScript &amp;gt; Code Quality Tools &amp;gt; ESLint
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在 ESLint 配置面板中配置 Linter 信息如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：ESLint package 和 Additional rules directory 需要配置为 ESLint 以及 Airbnb 配置的安装目录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/linter.png&quot; alt=&quot;linter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置完毕之后 Linter 便可立即生效。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;参考&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/airbnb/javascript#the-javascript-style-guide-guide&quot;&gt;Airbnb JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sublimelinter.com/en/latest/&quot;&gt;SublimeLinter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hackingwithreact.com/read/1/40/linting-react-using-airbnbs-eslint-rules&quot;&gt;Linting React using Airbnb’s ESLint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 25 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.surfacew.com/fe_tech/2016/07/25/Linter/</link>
        <guid isPermaLink="true">http://www.surfacew.com/fe_tech/2016/07/25/Linter/</guid>
        
        <category>code fe Quality</category>
        
        
        <category>fe_tech</category>
        
      </item>
    
      <item>
        <title>前端入门学习指南</title>
        <description>&lt;p&gt;前端看起来简单，但其实入门曲线是比较陡的，因为涉及的技术面很广、很杂，不容易做到面面俱到并且都能够深入研究。因而业界最容易出现的现象就是：水平一般或者入门的前端工程师很多，优秀的前端工程师却很少。此刻的互联网行业挺缺前端的，但是缺乏的是优秀的前端。如果想在前端发展的话，一定不要浅尝辄止，否则很难找到比较理想的工作。&lt;/p&gt;

&lt;p&gt;就前端而言，入门必须学三样东西，HTML 、CSS 和 JavaScript，人称：网页三剑客。学习 HTML、CSS 的目的是能够构建一张具体的网页，有内容，有排版，有样式，并且拥有合理交互的界面。学习 JavaScript 的目的是在于让页面和用户通过鼠标等媒介和网页进行交互。&lt;/p&gt;

&lt;p&gt;HTML 比较简单，只需要熟练即可。HTML 要求能够根据内容构建具有语义的标准页面。通过对 W3CSchool 上的文章阅读能够对 HTML 形成初步的印象，并且理解语义 Web 的构建概念，能够简单地构建出一个类类似于博客的页面、内容骨架。如果有时间的话，还是有必要深入学习一下《HTML 权威指南》这类型厚重的书籍，你会发现学习完毕之后你对 HTML 的理解会上升一个层面。&lt;/p&gt;

&lt;p&gt;CSS 入门还是挺容易的，根据设计图将 HTML 中的元素进行装饰然后制作出和设计图相一致的页面。但 CSS 要求使用的时候尽可能熟练，最好能够实验一下 CSS 中的每一种属性的作用，以及他们的组合所能够创建的各种效果。然而精通 CSS 绝非容易，这需要大量的实战经验，因为在实战中，项目往往比较复杂，在这种背景下能够大量书写错综复杂的 CSS 语句，能够得到更精细而具体的训练，能够遇到层出不穷的问题，然后在解决这些问题中成长。&lt;/p&gt;

&lt;p&gt;CSS 在入门的时候，推荐阅读一些指南类型的书籍，然后尝试做一个简单的个人项目，练好 HTML 和 CSS 的配合。比如：纯静态的个人博客（这个博客就是典型的静态博客，只由 HTML 和 CSS 构成），只有在实践中技术才能够得到历练，才能够快速进步和成长。&lt;/p&gt;

&lt;p&gt;在学习完了 HTML、CSS 之后，接下来就要开始进入前端程序设计的世界了。JavaScript 的学习就比较复杂了，毕竟是一门图灵完备的编程语言。如果想成为一个优秀的前端工程师的话， JS 是必备的，而且是要学得非常好的。一般推荐入门的时候啃一本稍微厚一点的，系统一点的书籍，强烈推荐《JavaScript权威指南》这本书。这本书值得坚持并认真看几个月，虽然中途你会有各种疑问，但是你可以暂且跳过，直到隔了几个月有更多的实践经验之后再来读第二遍，这样对 JS 的进步大有好处。值得一提的是，在学习 JavaScript 可以并行熟悉 HTML，达到运用自如的地步，同时不断练习 CSS 的各种技巧的使用。熟能生巧就是这个意思。&lt;/p&gt;

&lt;p&gt;等阅读完了这种 Bible 级别的指南书籍之后，推荐阅读 《JavaScript 精粹》一书，这本书讲解了这门程序语言精彩的设计之处以及要避免的雷区。在此之后，《JavaScript 模式》、《JavaScript 设计模式》、《高性能的 JavaScript》、《编写可维护的 JavaScript》、Canvas 技术等相关书籍，用于深造和进阶理解这本表现力极度强大的程序设计语言。&lt;/p&gt;

&lt;p&gt;当然，在入门了 JavaScript 之后，推荐学习 jQuery，来理解一个经典的前端工具库是如何造福前端，提高开发效率的。在 jQuery 之后也推荐学习比较火的 React 或是 AngularJS 等 UI 框架或者类库，具体按需取学，框架如此之多，但是慎重选择学习。&lt;/p&gt;

&lt;p&gt;在以上的学习过程中，也可以并行插入对前端工具链的学习，包括自动化工作流程的：Gulp，模块化的 Browserify / Webpack，以及神器 Node。除此之外，ES6、函数式编程也是未来的趋势，值得在空余的时候进修跟上时代的步伐。&lt;/p&gt;

&lt;p&gt;最后我提供一份自己前端视野的清单，供大家参考，也希望大家能够从中找到自己的发展方向，并探索自己的技术成长路线，欢迎 fork 一份，然后 pull request，让我们共同维护这个知识体系！&lt;/p&gt;

&lt;p&gt;参考文档地址：&lt;a href=&quot;https://github.com/SurfaceW/SurfaceW.Knowledge/blob/master/tech/FE.md&quot;&gt;FE&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://www.surfacew.com/fe/2015/12/20/FE/</link>
        <guid isPermaLink="true">http://www.surfacew.com/fe/2015/12/20/FE/</guid>
        
        <category>technology guiding</category>
        
        
        <category>fe</category>
        
      </item>
    
      <item>
        <title>Immutable JavaScript 及其反思</title>
        <description>&lt;p&gt;ImmutableJS 是让 JavaScript 支持不可变的数据结构的语言扩展，它是一种高效、便捷的扩展，也是 JS  实现函数式编程的基础。它提供了 No-Side-Effects（无负面影响） 的可能性，阻遏了全局污染和变量污染。（因为 JS 很多时候是基于引用来赋值的）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;它的好处在于：没有副作用，不会修改原有的数据结构，高效（使用了 Hash Tries，类似于 Closure 对不可变数据结构的实现），支持惰性计算（Lazy-evaluation）、强大的列表操作能力，可以 Rollback 到某一个状态上，重现问题或者错误现场。&lt;/li&gt;
  &lt;li&gt;Facebook 实现的 ImmutableJS 适合在实战项目中使用，并发挥其特点，为相对大型项目的研发提供数据的不可变性的支持。&lt;a href=&quot;http://facebook.github.io/immutable-js&quot;&gt;Immutable JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;函数式编程以其优势特点：No-Side-Effects、Pure Functions、函数层次抽象等可能成为前端未来的编程范式，React 采用一些函数式编程的思想就是一种证据。&lt;/p&gt;

&lt;p&gt;JavaScript 是一门强势的也是弱势的语言。&lt;/p&gt;

&lt;p&gt;强势在于其灵活性，强大的社区后盾以及浏览器领域的统治性。最近推出的 ES2015（ES6） 很强势地弥补了部分语言的缺陷，但是缺乏普适的兼容性；&lt;/p&gt;

&lt;p&gt;弱势在于其语言本身设计并学术一样的非严密，Good Parts 一书就是很好的证明。所以很多时候需要三方的工具、库以及框架来对语言进行扩展，比如：jQuery，Underscore 等。&lt;/p&gt;

&lt;p&gt;因而 ImmutableJS 也是对语言基础类型的扩展，让其支持 JS 数据结构的不可变性。&lt;/p&gt;

&lt;p&gt;最后学习 JavaScript 的时候，更多关心底层的工具使用，提高设计效率比掌握一系列的各种框架要好。一些近来的核心技术，比如：&lt;code&gt;ES6&lt;/code&gt; / &lt;code&gt;Babel&lt;/code&gt;、&lt;code&gt;jQuery&lt;/code&gt;、&lt;code&gt;Webpack&lt;/code&gt; / &lt;code&gt;Browserify&lt;/code&gt;、&lt;code&gt;React&lt;/code&gt; 等技术是值得深入的。&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://www.surfacew.com/technology/2015/11/27/ImmutableJS%E5%8F%8A%E5%85%B6%E5%8F%8D%E6%80%9D/</link>
        <guid isPermaLink="true">http://www.surfacew.com/technology/2015/11/27/ImmutableJS%E5%8F%8A%E5%85%B6%E5%8F%8D%E6%80%9D/</guid>
        
        <category>tech</category>
        
        
        <category>technology</category>
        
      </item>
    
      <item>
        <title>22岁记</title>
        <description>&lt;p&gt;时间过得很快，比我想象中快了好多。自象征着规则教育的小学，到素质教育的初中，到应试教育顶峰的高中，再到潜心独立研习，抉择未来职业道路的大学，这一切在意识里不过一瞬，转眼即逝。&lt;/p&gt;

&lt;p&gt;生命到头来还是在做减法，时间是机会和成本的筹码，我们用它来换取物质的欢愉、人情的暧昧、事业的成功…还有金钱、名利借以满足日益膨胀的欲望。选择的时候，得想明白，时间花在这些事物上是否值得。&lt;/p&gt;

&lt;p&gt;人嘛，存在于世，好歹得为这个世界做点什么。虽然虚无主义者会说人类生来本无什么意义。但人类这种无聊的生物总会为自己的举措赋予意义，以意义指导行为，以行为创造符合意义的价值。于是乎世界热闹起来，人们也觉得自己的存在被肯定，因而激发生理上的愉悦，自然而然集体的信念开始出现，也构成了社会惩善扬恶、劳动致富等人人皆知的道理。&lt;/p&gt;

&lt;p&gt;生命的年轮环环铺开的同时，选择的道路也依稀延伸出来。道路可以说是对自己存在意义的诠释，或是生命的信念，亦或是个人的信仰。条条道路没有绝对的好坏之分，因为好与坏永远是相对于人而言的。&lt;/p&gt;

&lt;p&gt;人生一路上，往往充满了机遇与挑战。
机遇是自己创造的。之所以充满机遇是因为自己总在不断探寻实现价值和意义的途径，这种途径便是机遇。然而你不去探索，又何尝存在机遇呢？
挑战是现况和欲求的矛盾产生的。欲望往往越强烈，追求的事物越超乎平凡，挑战往往越艰巨。挑战本身来说本无绝对的好坏，但是对于有明确目标的人来说，适度的挑战能够让人振奋起来朝着理想的道路迈进。&lt;/p&gt;

&lt;p&gt;一路走来，我用 21 年的时光换得了如今的模样，在生日到来之际我想说：无论怎么样我都一直在尝试赋予自己生命更多价值与意义，不想碌碌无为，枉活一生。但我尊重每一种形式的生命，因为它们都有其独特的色彩。&lt;/p&gt;

&lt;p&gt;刚穿越过江河，就要驶向大海，去寻求那理想的彼岸！&lt;/p&gt;

&lt;p&gt;2015.11.3 于知乎&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/zhihu.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://www.surfacew.com/article/2015/11/03/22YearOld/</link>
        <guid isPermaLink="true">http://www.surfacew.com/article/2015/11/03/22YearOld/</guid>
        
        <category>article</category>
        
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>Chrome DevTools 的应用</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;工欲善其事，必先利其器。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就前端而言，Chrome DevTools 是 Debug 以及性能分析的神器。
就前端工程师而言，用好调试和性能工具，才能够算是一个出色的前端工程师。
我在这篇文章中将总结 Chrome DevTools 的一些最为典型的用法，以提高研发和调试效率。&lt;/p&gt;

&lt;p&gt;本文主要参考的资料：Chrome DevTools &lt;a href=&quot;https://developer.chrome.com/devtools&quot;&gt;Chrome 官方文档&lt;/a&gt; (主要是官方文档又长又臭，加之英文版很少有人完全认真读完，所以在此结合自身经验总结最有价值的，最常用的部分于后方，查漏补缺，说不定有新发现~)&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;启用调试工具&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;在网页中右键单击&lt;code&gt;审查元素&lt;/code&gt; 或者 &lt;code&gt;右上角菜单栏中 -&amp;gt; 更多工具 -&amp;gt; 开发者工具&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;快捷键：&lt;code&gt;Ctrl[Command] + Shift[Opt] + I/J/C&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;I&lt;/code&gt; 打开调试工具，&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;J&lt;/code&gt; 直接进入Console&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;C&lt;/code&gt; 启动 Inspect Element 模式等价于右键在相关元素上单击审查元素&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;点击调试工具左上角的 手机图标 可以进入 Device Mode（设备模式，可以模拟 iPad、iPhone 等测试环境）这一部分本文就没有详细提及了，请自行查阅：&lt;a href=&quot;https://developer.chrome.com/devtools/docs/device-mode&quot;&gt;Device-Mode&lt;/a&gt; 
    &lt;ul&gt;
      &lt;li&gt;设备模拟：屏幕比例、尺寸、分辨率、DPR&lt;/li&gt;
      &lt;li&gt;模拟设备的旋转、模拟网络连接速度（2G网络、3G网络）&lt;/li&gt;
      &lt;li&gt;Media-Query 模拟&lt;/li&gt;
      &lt;li&gt;Sensors 模拟（Emulation 选项卡中、高大上！）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;devtools-&quot;&gt;DevTools 设置&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/webdevtools/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;注意1：在基础设置里面，有很多功能是需要手动启动的，例如比较常用的：&lt;em&gt;Disable Cache&lt;/em&gt; (while DevTools is open)（缓存禁用）。&lt;/li&gt;
  &lt;li&gt;注意2：推荐启动 ShadowDOM、标尺、Ajax请求Log 的设置。选项，这有利于提高平时的开发效率。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;至于其余选项，实际开发中按需勾选。左上角还有 Devices 选项、Workspace 选项（支持本地加载文件的沙箱）、快捷键等选项，可以按需配置。调试面板支持对应的横屏、竖屏以及独立出来的现实方式，由个人喜好而定。面板右上方有一个 Drawer 的选项，点击他之后可以出一个抽屉状的区域，方便进行 Console, Search, Emulation, Rendering 选项卡的调试。快捷键是：[ESC]&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;工具的分类&lt;/h2&gt;

&lt;p&gt;Chrome 官方调试工具目前一共有 8 个部分构成，接下来将逐一介绍这些工具的用法。&lt;/p&gt;

&lt;h3 id=&quot;elements&quot;&gt;Elements&lt;/h3&gt;

&lt;p&gt;Elements 面板提供了对 HTML、CSS 的一系列实时的增删查改操作，方便开发者实时调试代码。我们能够实时在页面上上做实验，然后再回去修改编辑器中的代码。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用 Inspect Element Mode 来定位页面上的元素能够快速找到其在 DOM 中的位置，可以通过点击 &lt;em&gt;放大镜&lt;/em&gt; 的小图标来激活查找。也可以在页面的元素上右键单击：审查元素获取。&lt;/li&gt;
  &lt;li&gt;选中对应的 DOM 之后右键可以编辑对应的节点的 HTML 源码，增删查改节点，还可以模拟元素 &lt;code&gt;hover&lt;/code&gt;, &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;focus&lt;/code&gt;, &lt;code&gt;visited&lt;/code&gt; 等状态的触发。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在右侧选项卡中，支持如下的强大功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Styles 选项卡中，我们能够对对应元素的样式 &lt;strong&gt;实时&lt;/strong&gt; 进行修改，Filter 方便查找对应的 CSS 样式，右上角的三个小标，分别支持添加新的规则、触发元素的状态改变以及修改动画速度。
    &lt;ul&gt;
      &lt;li&gt;由上图可见，调试工具非常方便，自动帮我们计算选择器的优先级，CSS规则是否适用等等，后面的元素盒模型也提供了精准的计算数据供参考。&lt;/li&gt;
      &lt;li&gt;CSS层级也分别显示出：级联的样式优先级、用户代理样式、作者样式、继承样式。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Computed 选项卡输出的是经过合并计算之后的元素样式，这些值是最终渲染到屏幕上的数据。&lt;/li&gt;
  &lt;li&gt;EventListener 能够查看绑定在当前元素及其父元素上的事件监听器，可以在调试事件代码的时候进行查看。&lt;/li&gt;
  &lt;li&gt;DOM Breakpoints 可以查看当前元素上所设置的断点，一般来说有：子节点变化、节点属性被修改、节点被删除的断点，方便调试针对节点操作的代码。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tips：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;元素支持拖曳操作，可以任意调换元素在 Document 中的位置。&lt;/li&gt;
  &lt;li&gt;在修改了 Elements 中对应的 HTML,CSS 后可在 Sources 面板中找到相关文件，点击右键：Local Modifications 可以查看对应的改动，方便将改动移植到编辑器中。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;console&quot;&gt;Console&lt;/h3&gt;

&lt;p&gt;Console 面板提供了一套针对开发者和代码之间交流的通道：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;它能够显示开发者主动通过 console 对象 log 的信息，同时 Google 为开发者提供了 Console API 以扩展 Console 的调试功能。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;它能显示错误，警告和提示信息，同时能够能够追溯到抛出信息的源码，以连接到 Sources 面板进行更深层次的诊断。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;它能够 LOG 网络请求。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;它能够实时地和当前的全局对象进行交互，类似于 Node 的实时解释器。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;它还能够连接到 Network 面板和 Sources 面板等用于实时定位抛出信息的网络请求和代码。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;console-api&quot;&gt;常用的 Console API&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;console.log()&lt;/code&gt;, &lt;code&gt;console.warn()&lt;/code&gt;, &lt;code&gt;console.error()&lt;/code&gt;信息、警告、错误&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;console.assert(a&amp;lt;=5, ‘a should &amp;lt;= 5’)&lt;/code&gt; 断言&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;console.trace()&lt;/code&gt; 能够打印出当前执行函数的调用栈&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;console.table([{‘a’:1},{‘b’:2}])&lt;/code&gt; 格式化复杂的数据结构为表格的样式&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;console.time(’taskname’), console.timeEnd(’taskname’)&lt;/code&gt; 记录运行时间，同时会在 Timeline 时间轴上显示&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;console.timeStamp(’name’)&lt;/code&gt; 可以命名 Timeline 中函数调用步骤名称&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Console 的 API 参考如下：&lt;a href=&quot;https://developer.chrome.com/devtools/docs/console&quot;&gt;Console API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Console 支持 Filter 能够过滤掉不同的信息，或者只保留有效的信息，比如只保留开发者所手动 Log 的 Logs。&lt;/li&gt;
  &lt;li&gt;使用 debugger; 命令能够让 js 在 console 中打断点，并且在该行暂停执行。&lt;/li&gt;
  &lt;li&gt;使用 &lt;code&gt;profile(‘mark’)&lt;/code&gt;以及&lt;code&gt;profileEnd(‘mark’)&lt;/code&gt;能够手动控制 JavaScript Profiler 的执行。&lt;/li&gt;
  &lt;li&gt;使用 &lt;code&gt;Shift + Enter&lt;/code&gt; 能够在 Console 中换行，书写比较长的代码 :)&lt;/li&gt;
  &lt;li&gt;支持 SourceMap，针对 Browerify/Webpack 之类的合并代码在 Debug 的时候能够追溯回源代码之上。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sources&quot;&gt;Sources&lt;/h3&gt;

&lt;p&gt;Sources 面板提供了强大的针对源码（主要为 JavaScript）的调试功能。它将 V8 Debugger 可视化。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;它支持查找不同域下的代码，并在代码行上打断点。&lt;/li&gt;
  &lt;li&gt;它支持直接修改源代码。&lt;/li&gt;
  &lt;li&gt;它支持压缩代码自动格式化，方便为压缩后的代码打断点。&lt;/li&gt;
  &lt;li&gt;在右侧面板中提供了 JS 断点调试的重要工具：
    &lt;ul&gt;
      &lt;li&gt;continue 运行到下一个断点处&lt;/li&gt;
      &lt;li&gt;stop script execution 立即停止执行&lt;/li&gt;
      &lt;li&gt;Step over next function call 跳到下一个函数执行完毕处&lt;/li&gt;
      &lt;li&gt;Step into next function call 调到下一个函数执行开始处&lt;/li&gt;
      &lt;li&gt;Step out of current function call 跳出当前函数&lt;/li&gt;
      &lt;li&gt;Deactivate breakpoints 不激活断点&lt;/li&gt;
      &lt;li&gt;Pause on exceptions 在异常出暂停&lt;/li&gt;
      &lt;li&gt;Capture Async stack traces 捕获异步调用的函数站&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;支持手动输入 Watch Expressions 构建断点&lt;/li&gt;
  &lt;li&gt;支持查询调用栈&lt;/li&gt;
  &lt;li&gt;支持作用域和作用域链的查询&lt;/li&gt;
  &lt;li&gt;支持 DOM、XHR 以及事件处设置断点&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;我们能够直接编辑 Source 面板的源码进行调试，同时可以查看本地文件的修改情况，这样能够大大提高效率。&lt;/li&gt;
  &lt;li&gt;使用 Ctrl[Command] + F 能够进行搜索源代码，甚至直接替换代码。&lt;/li&gt;
  &lt;li&gt;在断点处单击右键可以编辑触发断点的条件。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;network&quot;&gt;Network&lt;/h3&gt;

&lt;p&gt;Network 面板提供了调试网络性能的一系列工具：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;它能够捕获所有的请求信息，并将其做成时间轴，方便查看资源或者 Ajax 请求等详细信息。
    &lt;ul&gt;
      &lt;li&gt;它能够捕获两个重要的事件：&lt;code&gt;DOMContentLoaded&lt;/code&gt; 事件（紫色线）以及 &lt;code&gt;load&lt;/code&gt; 事件（红色线）的触发时间。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;它能够记录各类请求的具体信息，以 HTTP 请求为例
    &lt;ul&gt;
      &lt;li&gt;HTTP 请求的头部信息&lt;/li&gt;
      &lt;li&gt;HTTP 请求相应的信息、响应信息的预览（图片、JSON格式化、网页预览等）&lt;/li&gt;
      &lt;li&gt;HTTP 请求所携带的 Cookie&lt;/li&gt;
      &lt;li&gt;HTTP 请求耗时的具体信息，具体的字段值标记含义可以参考：&lt;a href=&quot;https://developer.chrome.com/devtools/docs/network#resource-network-timing&quot;&gt;Chrome Network Timing&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;它能够和资源面板保持连接，方便选择资源的跳转。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个 Web 请求的网络流程：
&lt;img src=&quot;/img/articles/webdevtools/02.png&quot; alt=&quot;image&quot; /&gt;
具体的数据，可以通过：&lt;code&gt;window.performance.getEntries()&lt;/code&gt; 获得各个资源的网络时间戳。&lt;/p&gt;

&lt;p&gt;Tips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在请求资源上右键可以拷贝各种请求相关的信息，比如：cURL, HAR，请求头，响应信息等等，颇为方便。&lt;/li&gt;
  &lt;li&gt;针对 Ajax 请求，右键支持重新发送相同的 Ajax 请求，方便调试。&lt;/li&gt;
  &lt;li&gt;支持 WebSocket Inspection 功能，可以使用 Filter 将 WebSocket 独立出来。&lt;/li&gt;
  &lt;li&gt;时间轴上表格的标题列上右键可以添加更多的 HTTP 属性进入到表格中，比如 method 属性。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;timeline&quot;&gt;Timeline&lt;/h3&gt;

&lt;p&gt;Timeline 面板提供了一套用于提高渲染性能的工具，它能够清晰地显示整个浏览器渲染一张网页、执行各种操作的细节信息。主要记录了以下四种操作耗时：
&lt;img src=&quot;/img/articles/webdevtools/03.png&quot; alt=&quot;image&quot; /&gt;
可以通过：Events 模式来查看捕获到的事件信息；Frames 模式可以显示捕获到的页面性能信息；Memory 模式可以查看页面内存的使用情况。&lt;/p&gt;

&lt;p&gt;通过理解如下标记所表示的事件含义，我们能够更好地理解页面的事件流程，检查出类似于强制型 Layouts 的影响页面性能的代码（Timeline 中一般会以小三角警告之）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/webdevtools/04.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;/img/articles/webdevtools/05.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;/img/articles/webdevtools/06.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;/img/articles/webdevtools/07.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;profiles&quot;&gt;Profiles&lt;/h3&gt;

&lt;p&gt;Profiles 面板提供了一系列用于提高 JavaScript / CSS 性能的工具：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU Profiler：它能够显示脚本调用的函数所使用的 CPU 时间。可以统计出耗时最多的函数，以考虑优化。&lt;/li&gt;
  &lt;li&gt;Heap Profiler：它能够显示脚本所分配的内存情况。（主要是 JS 对象和 DOM 节点）以此检查是否存在内存泄露或者页面占用内存过多的问题。&lt;/li&gt;
  &lt;li&gt;JavaScript Profile：能够显示执行脚本所运行的时间。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;深入请参考：&lt;a href=&quot;https://developer.chrome.com/devtools/docs/javascript-memory-profiling&quot;&gt;Prifiles&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;p&gt;Resources 面板则提供了一系列的资源查询：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;页面所下载的资源：HTML文档、CSS文档、图片、文字、脚本等等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;页面所对应的：WebSQL、IndexedDB、LocalStorage、SessionStorage、Cookies、ApplicationCache 以及 Cache Storage 信息的查询。&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Cookies 是常用的面板，我们可以在这里浏览、删除、修改 Cookies。&lt;/li&gt;
      &lt;li&gt;LocalStorage 也就不赘述了。&lt;/li&gt;
      &lt;li&gt;ApplicationCache 是通过 manifest 文件定义的缓存文件，支持离线应用。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;audits&quot;&gt;Audits&lt;/h3&gt;

&lt;p&gt;针对页面提供优化意见，官方推荐使用 PageSpeed Insights 在线测试工具来替代。&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;推荐工具&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最后：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chrome 的这个调试工具还支持调试 NodeJS 所编写的应用程序！参考其中一种该解决方案：&lt;a href=&quot;https://github.com/node-inspector/node-inspector&quot;&gt;Node Inspector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;React 等三方也提供了针对 React 调试的 Chrome 插件，以增强 Debugger 针对特殊应用的能力。&lt;/li&gt;
  &lt;li&gt;Chrome 提供了 Canary 这个工具来支持开发者领略最新的 Chrome 技术，如果不嫌烦的话，可以开发用 Canary 而平时浏览网页和正式测试的时候使用 Chrome。&lt;a href=&quot;https://www.google.com/intl/en/chrome/browser/canary.html&quot;&gt;地址&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Chrome 支持远程调试 &lt;a href=&quot;https://developer.chrome.com/devtools/docs/remote-debugging&quot;&gt;Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 22 Oct 2015 00:00:00 +0800</pubDate>
        <link>http://www.surfacew.com/technology/2015/10/22/Chrome%20DevTools%20%E7%9A%84%E5%BA%94%E7%94%A8/</link>
        <guid isPermaLink="true">http://www.surfacew.com/technology/2015/10/22/Chrome%20DevTools%20%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
        
        <category>tech fe front-end developer</category>
        
        
        <category>technology</category>
        
      </item>
    
      <item>
        <title>所谓信仰</title>
        <description>&lt;p&gt;人的宿命是死亡，却能够在有限的时间内演绎生命的过程。这个过程中充满了人类独有的&lt;strong&gt;理性思维&lt;/strong&gt;，这种思维让人们诘问自己，&lt;strong&gt;什么样的存在才是我所想要的存在，换言之，什么样的存在才是有意义的存在？&lt;/strong&gt;这种意识便是信仰。&lt;/p&gt;

&lt;p&gt;我是无神论者，我不信仰宗教，但是我离不开对信仰的思考。因为信仰一直告诉自己：什么是有意义的？什么样的意义能够衍生出价值？它自然是理性指导行为的方针与准则，是主观能动性发挥作用的根基，如同宪法位于法律体系之首，信仰就是人类理性行为的基石。&lt;/p&gt;

&lt;p&gt;正如西谷启治对信仰的解释那样，信仰是站在宇宙的角度，对个人、人类的思考，换言之：个人、人类存在的意义是什么？如何杜绝灵魂中“虚无”的存在？如何让自己在灵魂的层面上支持自己，给自己情感、理性、强有力的精神支持，让自己认定自己所做的一切是“有意义”的，而不是“虚无”的？&lt;/p&gt;

&lt;p&gt;我想，只要理性的意识还存在，人都应该有这自己的信仰，无论自己是否承认它的存在。&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Feb 2015 00:00:00 +0800</pubDate>
        <link>http://www.surfacew.com/thoughts/2015/02/13/faith/</link>
        <guid isPermaLink="true">http://www.surfacew.com/thoughts/2015/02/13/faith/</guid>
        
        <category>movie feeling</category>
        
        
        <category>thoughts</category>
        
      </item>
    
      <item>
        <title>后会无期，相聚有时</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;平凡的人，不平凡的路，骚年们，我们相聚有时，后会无期！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今天在家里第二遍看后会无期，除了被韩寒的冷幽默逗乐之外，还是有些许零散的思考。&lt;/p&gt;

&lt;p&gt;这部电影有两条主线，一条是旅程的路，一条是路上的别。&lt;/p&gt;

&lt;p&gt;生命终点都一样，是平凡的，但抵达它的路却是不平凡的。这路或是崎岖，或是平坦，或是狭隘，或是阔绰，却都是独一无二的路。虽不知前方会是怎样，会发生什么样的故事，纵是举步维艰，依旧坚强地走下去，留下这番轨迹，这些故事。而我们并不能真正理解一个人的原因，或许是因为我们的路不尽相同罢了。&lt;/p&gt;

&lt;p&gt;一路上，我们会遇到很多人，这些人从相聚到别离，也只是生命中匆匆的过客。天底下没有不散的宴席，也没有能够陪自己走完一辈子的人。生之旅途，好比驶向坟墓的列车，总会有人频繁的上上下下，经历着悲欢离合，感受着热闹清寂。&lt;/p&gt;

&lt;p&gt;或许，在离别之际，也应该豁达一点，笑着挥手致别。同在一条路上的旅行是一件幸福的事情，纵是噙着泪，也要强忍着笑，告诉他后会无期，相聚有时！用电影中结尾的那句话道来便是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;人在别离的时候，话就应该说重点，说不定，多说的这句话，就是最后一句话；多看的那一眼，就是最后一眼。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 01 Feb 2015 00:00:00 +0800</pubDate>
        <link>http://www.surfacew.com/movie/2015/02/01/Road/</link>
        <guid isPermaLink="true">http://www.surfacew.com/movie/2015/02/01/Road/</guid>
        
        <category>movie feeling</category>
        
        
        <category>movie</category>
        
      </item>
    
      <item>
        <title>再见 2014， 你好 2015</title>
        <description>&lt;p&gt;人，总是向前看的，但是有时在年末的时候，回顾一番，看看有形无形的收获，也是一种享受。接下来我也来梳理一下 2014 的轨迹，想想还有点小激动呢~&lt;/p&gt;

&lt;p&gt;1月，考试狗，为了及格而拼命着 …… 当然，也从侧面也证明了本人逃课率50%以上（是的，平均两节翘掉一节）却仍然不挂科的能力；更讽刺大学教育体系的丑陋。&lt;/p&gt;

&lt;p&gt;2月，回归内江，假期真美！各种美食，各种游玩。还是家乡好，人美，景美，生活简单。当然，闲适是家乡的主题，和着妹妹们，看完了几季行尸走肉，还顺带玩了几圈麻将，这等生活，岂不令人陶醉。爆竹声中，辞旧迎新，一家人围坐春晚前，想着也觉得挺幸福的！&lt;/p&gt;

&lt;p&gt;3月2日，狗腾生日，一寝室的人，密室逃脱，嘻嘻。&lt;/p&gt;

&lt;p&gt;3月6日，和着罡罡去了林大，第二次听取百度FEX经理介绍前端的发展线路，感受很深，为未来的百度实习埋下种子。&lt;/p&gt;

&lt;p&gt;3月 - 4月，请叫我技术狗，也可以叫我码农，天天就码代码，还好没猝死… 
真心敲了好多代码，感觉那段日子了，除了代码就是代码了，梦里也是代码，醒来还是代码 = =||&lt;/p&gt;

&lt;p&gt;3月 - 4月，竭尽全力为了 KTree 这个项目的存活和发展，总是待在806实验室中，朝朝暮暮地捣鼓，感觉时间过得很快。自然，这些时日让我的前端技术方面由量变引发质变。期间翻遍了图书馆，阅读了各类事关前端的书籍，只为 KTree 前端能够足够强大。然而没想到的是，这番举措，最终带来的益处，是让我平滑过渡到了百度，却埋葬了 KTree（后期叫做 KGraph）。人生，很神奇，不是么？&lt;/p&gt;

&lt;p&gt;3月 - 4月，和着研究生学长，在贝壳的研究生实验室里开发一个医疗机构的后台 CRM（客户关系管理）系统。虽然前端很简单，但是仍然浪费了很多时间，让开发周期拖了好久。终究在6月得到了2000￥的报酬。CRM，是我和罡罡开发的第一个可交付使用的前端项目，也历练了我开发一般系统前端能力。&lt;/p&gt;

&lt;p&gt;4月，认真学习了关于数据结构和基础算法的知识，读了两本混杂的小说，看了些许漫画，觉得人生豁达了。同时开始进入微博中一个家伙的世界。&lt;/p&gt;

&lt;p&gt;5月，泡图书馆日子，往往是最美的。5月的一些时日，是我能感到的最为宁静、安详和舒适的日子。因为我总能很轻易地沉浸在一些事情之中，无论是思考、学习还是设计，都让我感到顺心。&lt;/p&gt;

&lt;p&gt;5月5日，惊喜！在4月偶然投得的一封简历，竟然被挖出来，通知我去面试了！一番准备之后，拿到了百度实习的 Offer，这是本年度最强喜事了！&lt;/p&gt;

&lt;p&gt;5月18日，出行 CBD，围着央视的大楼卖萌，在林立的高楼间穿梭。那时候，思考了蛮多关于未来的事情，关于金钱，关于事业和关于梦想。顺带参观了日坛公园。&lt;/p&gt;

&lt;p&gt;5月28日，806的宴席，一堆人，喝酒吃饭，难得的集体感。&lt;/p&gt;

&lt;p&gt;6月2日，和导员，君爷，出行天坛，顺带游玩西海。高中的朋友，还是真正的朋友！感谢你们让我的生活如此的美好！再者，人满为患的天坛，风趣讽刺的三人组，也是醉了。&lt;/p&gt;

&lt;p&gt;6月17日，考试期间返乡，我就是那么任性，冒着挂科的风险，在家安逸舒适地待了几天，虽然短暂，但令人舒适，随后屁颠屁颠地坐火车归京，一路上结识了一位清华微电子系的研究生，无所不谈，令人心快，感觉这时间的流逝比火车还快！&lt;/p&gt;

&lt;p&gt;7月1日，百度实习开始，生活从此进入了一种不同的境界。要同时兼容：学习、工作和生活的“三线程”模型，嘿嘿，我自有一套！&lt;/p&gt;

&lt;p&gt;7月 - 12月，为期6个月的百度实习能够给自身带来的收获是巨大的。百度实习的收获，不仅仅是经济支持（不过，说实话，有了这比钱，生活更溜了！），不仅仅是对专业技能的历练，也是对职场、工作和百度体系更高层面的认知，更是对行业的反思，对工业界，对商业界以及学术界的反思。至少现在我很清楚百度人，至少是技术从事人员在从事着什么样的工作，过着怎样的生活，这是一种怎样的体验了。&lt;/p&gt;

&lt;p&gt;7月8日，KGraph 冻结，接受严冬的摧残，等待春天的命运。&lt;/p&gt;

&lt;p&gt;7月13日，803的麻辣烫之行和后会无期的电影。有时候，和803的一堆室友一起行动是一件非常快乐的事情！一路上疯疯癫癫，点赞！&lt;/p&gt;

&lt;p&gt;8月1日，生来第一次，估计也是最后一次成为志愿者，免费观看了鸟巢汪峰的演唱会，自然也是生命中第一次参加演唱会，被那种千万人的场面震惊了OTZ。&lt;/p&gt;

&lt;p&gt;8月8日，Baidu Summer Party，难忘的一天，乃百度之盛宴！还记得 Robbin和他的小伙伴们 High 爆全场！&lt;/p&gt;

&lt;p&gt;8月11日，和佳莹看了驯龙记2，顺带逛了一番大钟寺的古玩市场，还记得两人相互拍照之后的合成图片，帅呆了！&lt;/p&gt;

&lt;p&gt;8月30日，十渡行，Baidu 的 Team-Building！一群程序员 High 爆了！不过北京外环的十渡风景区，还是一个蛮不错的地方，至少，有山水为伴，有工友为伴，觉得很开心，很快乐！（毕竟没有花一分钱嘛 = =）&lt;/p&gt;

&lt;p&gt;9月4日，和小学同学的故宫行，几年未见，也便能说说以前的故事，聊聊世间的变化了！&lt;/p&gt;

&lt;p&gt;10月，国庆节返乡，和家人大自然野炊，和弟弟漫步内江。&lt;/p&gt;

&lt;p&gt;10月 - 12月，806的一系列演讲，关于互联网，关于职业生涯，关于前端，以启发学弟，继承禄一湛学长的意志。&lt;/p&gt;

&lt;p&gt;11月2日，百度“实习四人帮”，出行五彩城。哥请客，吃了麻辣诱惑，味道很好，更重要的是，友谊天长地久！&lt;/p&gt;

&lt;p&gt;11月3日，生日，和着宿舍一帮人，吃了小火锅，很喜欢这种小资的生活节奏。再者，迁移了新工位，从百度大厦到中关村软件科技园二期。（以后，见人便可说：想当年，哥好歹也是在中关村，软件园待过的男人）生日当天，竟得到了百度的馈赠 —— 一个新工位，宽敞而明亮！我的心，也一样！&lt;/p&gt;

&lt;p&gt;11月5日，和一学弟在五道口的肯德基内常坐，什么都聊，关于这两年的大学生活，关于机遇，关于计算机，关于科学… 再者，APEC Blue，天真蓝啊~&lt;/p&gt;

&lt;p&gt;11月30日，上线了 blog.surfacew.com 从此，开始在这个博客上书写自己的故事、见解和技术文章。&lt;/p&gt;

&lt;p&gt;12月，为自发组织的一个叫做 Connectify 的项目，竭尽全力，开发出第一个原型。&lt;/p&gt;

&lt;p&gt;12月2日，KGraph结题答辩，留下丝丝遗憾，但愿褪去最后的稚气。&lt;/p&gt;

&lt;p&gt;12月10日，珍爱生命，远离考试。&lt;/p&gt;

&lt;p&gt;12月11日，破例玩英雄联盟三天，就玩寒冰艾希，请叫我：打了十多局的人机狗，谢谢。&lt;/p&gt;

&lt;p&gt;12月31日，送了自己一份跨年礼物，叫做 iPad Air 2。（去年是 5c, 估计明年是 MacBook Pro 吧，汗，败家啊）&lt;/p&gt;

&lt;p&gt;2014就这么过去了，蛮充实的，但是也有丝丝遗憾，无论怎么样都是我生命中独一无二的14年，它真的让我走得更远，看得更远。&lt;/p&gt;

&lt;p&gt;或许生命最美妙的不过于你能够真正感受到成长的足迹，感受到生命的历程中的美。&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 00:00:00 +0800</pubDate>
        <link>http://www.surfacew.com/me/2015/01/01/Hello2015Bye2014/</link>
        <guid isPermaLink="true">http://www.surfacew.com/me/2015/01/01/Hello2015Bye2014/</guid>
        
        <category>year</category>
        
        
        <category>me</category>
        
      </item>
    
      <item>
        <title>听泉</title>
        <description>&lt;p&gt;【日】东山魁夷&lt;/p&gt;

&lt;p&gt;鸟儿飞过旷野。一批又一批，成群的鸟儿接连不断地飞了过去。 &lt;/p&gt;

&lt;p&gt;有时候四五只联翩飞翔，有时候排成一字长蛇阵。看，多么壮阔的鸟群啊!…… &lt;/p&gt;

&lt;p&gt;鸟儿呜叫着，它们和睦相处，互相激励；有时又彼此憎恶，格斗，伤残，有的鸟儿因疾病、疲惫或衰老而失掉队伍。 &lt;/p&gt;

&lt;p&gt;今天，鸟群又飞过旷野。它们时而飞过碧绿的田原，看到小河在太阳照耀下流泻；时而飞过丛林，窥见鲜红的果实在树荫下闪灼。想从前，这样的地方有的是。可如今，到处都是望不到边的漠漠荒原。任凭大地改换了模样，鸟儿一刻也不停歇，昨天，今天，明天，它们继续打这里飞过。 &lt;/p&gt;

&lt;p&gt;不要认为鸟儿都是按照自己的意志飞翔的。它们为什么飞?它们飞向何方?谁都弄不清楚，就连那些领头的鸟儿也无从知晓。 &lt;/p&gt;

&lt;p&gt;为什么必须飞得这样快?为什么就不能慢一点呢? &lt;/p&gt;

&lt;p&gt;鸟儿只觉得光阴在匆匆忙忙中逝去了。然而，它们不知道时间是无限的，永恒的，逝去的只是鸟儿自己。它们像着了迷似地那样剧烈，那样急速地振膈翱翔。它们没有想到，这会招来不幸，会使鸟儿更快地从这块土地上消失。 &lt;/p&gt;

&lt;p&gt;鸟儿依然忽喇喇拍着翅膀，更急速，更剧烈地飞过去…… 
　　
森林中有一泓清澈的泉水，发出叮叮咚咚的响声，悄然流淌。这里有鸟群休息的地方，尽管是短暂的，但对于飞越荒原的鸟群说来，这小憩何等珍贵!地球上的一切生物，都是这样，一天过去了，又去迎接明天的新生。 &lt;/p&gt;

&lt;p&gt;鸟儿在清泉旁歇歇翅膀，养养精神，倾听泉水的絮语。鸣泉啊，你是否指点了鸟儿要去的方向？ &lt;/p&gt;

&lt;p&gt;泉水从地层深处涌出来，不间断地奔流着，从古到今，阅尽地面上一切生物的生死、荣枯。因此，泉水一定知道鸟儿应该飞去的方向。 &lt;/p&gt;

&lt;p&gt;鸟儿站在清澄水边，让泉水映照着身影，它们想必看到了自己疲倦的模样，它们终于明白了鸟儿作为天之骄子的时代已经一去不复返了。 &lt;/p&gt;

&lt;p&gt;鸟儿想随处都能看到泉水，这是困难的。因为，它们只顾尽快飞翔。 &lt;/p&gt;

&lt;p&gt;不过，它们似乎有所觉悟，这样连续飞翔下去，到头来，鸟群本身就会泯灭的，但愿鸟儿尽早懂得这个道理。 &lt;/p&gt;

&lt;p&gt;我也是群鸟中的一只，所有的人们都是在荒凉的不毛之地上飞翔不息的鸟儿。 &lt;/p&gt;

&lt;p&gt;人人心中都有一股泉水，日常的烦乱生活，遮蔽了它的声音，当你夜半突然醒来，你会从心灵的深处，听到幽然的鸣声，那正是潺谖的泉水啊！ &lt;/p&gt;

&lt;p&gt;回想走过的道路，多少次在这旷野上迷失了方向。每逢这个时候，当我听到心灵深处的鸣泉，我就重新找到了前进的标志。 &lt;/p&gt;

&lt;p&gt;泉水常常问我：你对别人，对自己，是诚实的吗?我总是深感内疚，答不出话来，只好默默低着头。&lt;/p&gt;

&lt;p&gt;我从事绘画，是出自内心的祈望：我想诚实地生活。心灵的泉水告诫我：要谦虚，要朴素，要舍弃清高和偏执。 &lt;/p&gt;

&lt;p&gt;心灵的泉水教导我：只有舍弃自我，才能看见真实。 &lt;/p&gt;

&lt;p&gt;舍弃自我是困难的，甚至是不可能的，我想。然而，絮絮低语的泉水明明白白对我说：&lt;strong&gt;美，正在于此&lt;/strong&gt;。&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://www.surfacew.com/article/2014/12/19/%E5%90%AC%E6%B3%89/</link>
        <guid isPermaLink="true">http://www.surfacew.com/article/2014/12/19/%E5%90%AC%E6%B3%89/</guid>
        
        <category>article</category>
        
        
        <category>article</category>
        
      </item>
    
  </channel>
</rss>
